This program calculates a nonlinear regression for each voxel of the  
input AFNI 3d+time data set.  The nonlinear regression is calculated  
by means of a least squares fit to the signal plus noise models which 
are specified by the user.                                            
                                                                      
Usage:                                                                
3dNLfim                                                               
-input fname       fname = filename of 3d + time data file for input  
[-mask mset]       Use the 0 sub-brick of dataset 'mset' as a mask    
                     to indicate which voxels to analyze (a sub-brick 
                     selector is allowed)  [default = use all voxels] 
[-ignore num]      num   = skip this number of initial images in the  
                     time series for regresion analysis; default = 0  
               ****N.B.: default ignore value changed from 3 to 0,    
                         on 04 Nov 2008 (BHO day).                    
[-inTR]            set delt = TR of the input 3d+time dataset         
                     [The default is to compute with delt = 1.0 ]     
                     [The model functions are calculated using a      
                      time grid of: 0, delt, 2*delt, 3*delt, ... ]    
[-TR delt]         directly set the TR of the time series model;      
                     can be useful if the input file is a .1D file    
                     (transposed with the \' operator)               
[-time fname]      fname = ASCII file containing each time point      
                     in the time series. Defaults to even spacing     
                     given by TR (this option overrides -inTR).       
-signal slabel     slabel = name of (non-linear) signal model         
-noise  nlabel     nlabel = name of (linear) noise model              
-sconstr k c d     constraints for kth signal parameter:              
                      c <= gs[k] <= d                                 
                 **N.B.: It is important to set the parameter         
                         constraints with care!                       
                 **N.B.: -sconstr and -nconstr options must appear    
                         AFTER -signal and -noise on the command line 
-nconstr k c d     constraints for kth noise parameter:               
                      c+b[k] <= gn[k] <= d+b[k]                       
[-nabs]            use absolute constraints for noise parameters:     
                     c <= gn[k] <= d  [default=relative, as above]    
[-nrand n]         n = number of random test points [default=19999]      
[-nbest b]         b = use b best test points to start [default=9]   
[-rmsmin r]        r = minimum rms error to reject reduced model      
[-fdisp fval]      display (to screen) results for those voxels       
                     whose f-statistic is > fval [default=999.0]       
[-progress ival]   display (to screen) results for those voxels       
                     every ival number of voxels                      
[-voxel_count]     display (to screen) the current voxel index        
                                                                      
--- These options choose the least-square minimization algorithm ---  
                                                                      
[-SIMPLEX]         use Nelder-Mead simplex method [default]           
[-POWELL]          use Powell's NEWUOA method instead of the          
                     Nelder-Mead simplex method to find the           
                     nonlinear least-squares solution                 
                     [slower; usually more accurate, but not always!] 
[-BOTH]            use both Powell's and Nelder-Mead method           
                     [slowest, but should be most accurate]           
                                                                      
--- These options generate individual AFNI 2 sub-brick datasets ---   
--- [All these options must be AFTER options -signal and -noise]---   
                                                                      
[-freg fname]      perform f-test for significance of the regression; 
                     output 'fift' is written to prefix filename fname
[-frsqr fname]     calculate R^2 (coef. of multiple determination);   
                     store along with f-test for regression;          
                     output 'fift' is written to prefix filename fname
[-fsmax fname]     estimate signed maximum of signal; store along     
                     with f-test for regression; output 'fift' is     
                     written to prefix filename fname                 
[-ftmax fname]     estimate time of signed maximum; store along       
                     with f-test for regression; output 'fift' is     
                     written to prefix filename fname                 
[-fpsmax fname]    calculate (signed) maximum percentage change of    
                     signal from baseline; output 'fift' is           
                     written to prefix filename fname                 
[-farea fname]     calculate area between signal and baseline; store  
                     with f-test for regression; output 'fift' is     
                     written to prefix filename fname                 
[-fparea fname]    percentage area of signal relative to baseline;    
                     store with f-test for regression; output 'fift'  
                     is written to prefix filename fname              
[-fscoef k fname]  estimate kth signal parameter gs[k]; store along   
                     with f-test for regression; output 'fift' is     
                     written to prefix filename fname                 
[-fncoef k fname]  estimate kth noise parameter gn[k]; store along    
                     with f-test for regression; output 'fift' is     
                     written to prefix filename fname                 
[-tscoef k fname]  perform t-test for significance of the kth signal  
                     parameter gs[k]; output 'fitt' is written        
                     to prefix filename fname                         
[-tncoef k fname]  perform t-test for significance of the kth noise   
                     parameter gn[k]; output 'fitt' is written        
                     to prefix filename fname                         
                                                                      
--- These options generate one AFNI 'bucket' type dataset ---         
                                                                      
[-bucket n prefixname]   create one AFNI 'bucket' dataset containing  
                           n sub-bricks; n=0 creates default output;  
                           output 'bucket' is written to prefixname   
The mth sub-brick will contain:                                       
[-brick m scoef k label]   kth signal parameter regression coefficient
[-brick m ncoef k label]   kth noise parameter regression coefficient 
[-brick m tmax label]      time at max. abs. value of signal          
[-brick m smax label]      signed max. value of signal                
[-brick m psmax label]     signed max. value of signal as percent     
                             above baseline level                     
[-brick m area label]      area between signal and baseline           
[-brick m parea label]     signed area between signal and baseline    
                             as percent of baseline area              
[-brick m tscoef k label]  t-stat for kth signal parameter coefficient
[-brick m tncoef k label]  t-stat for kth noise parameter coefficient 
[-brick m resid label]     std. dev. of the full model fit residuals  
[-brick m rsqr  label]     R^2 (coefficient of multiple determination)
[-brick m fstat label]     F-stat for significance of the regression  

[-noFDR]                   Don't write the FDR (q vs. threshold)
                           curves into the output dataset.
                           (Same as 'setenv AFNI_AUTOMATIC_FDR NO')
                                                                      
     --- These options write time series fit for ---                  
     --- each voxel to an AFNI 3d+time dataset   ---                  
                                                                      
[-sfit fname]      fname = prefix for output 3d+time signal model fit 
[-snfit fname]     fname = prefix for output 3d+time signal+noise fit 
                                                                      

 -jobs J   Run the program with 'J' jobs (sub-processes).
             On a multi-CPU machine, this can speed the
             program up considerably.  On a single CPU
             machine, using this option is silly.
             J should be a number from 1 up to the
             number of CPU sharing memory on the system.
             J=1 is normal (single process) operation.
             The maximum allowed value of J is 32.
         * For more information on parallelizing, see
             https://afni.nimh.nih.gov/afni/doc/misc/parallize.html
         * Use -mask to get more speed; cf. 3dAutomask.

----------------------------------------------------------------------
Signal Models (see the appropriate model_*.c file for exact details) :

  Null                     : No Signal
                             (no parameters)
                             see model_null.c

  SineWave_AP              : Sinusoidal Response
                             (amplitude, phase)
                             see model_sinewave_ap.c

  SquareWave_AP            : Square Wave Response
                             (amplitude, phase)
                             see model_squarewave_ap.c

  TrnglWave_AP             : Triangular Wave Response
                             (amplitude, phase)
                             see model_trnglwave_ap.c

  SineWave_APF             : Sinusoidal Wave Response
                             (amplitude, phase, frequency)
                             see model_sinewave_apf.c

  SquareWave_APF           : Sinusoidal Wave Response
                             (amplitude, phase, frequency)
                             see model_squarewave_apf.c

  TrnglWave_APF            : Sinusoidal Wave Response
                             (amplitude, phase, frequency)
                             see model_trnglwave_apf.c

  Exp                      : Exponential Function
                             (a,b): a * exp(b * t)
                             see model_exp.c

  DiffExp                  : Differential-Exponential Drug Response
                             (t0, k, alpha1, alpha2)
                             see model_diffexp.c

  GammaVar                 : Gamma-Variate Function Drug Response
                             (t0, k, r, b)
                             see model_gammavar.c

  Beta                     : Beta Distribution Model
                             (t0, tf, k, alpha, beta)
                             see model_beta.c

  ConvGamma2a              : Gamma Convolution with 2 Input Time Series
                             (t0, r, b)
                             see model_convgamma2a.c

  ConvGamma                : Gamma Vairate Response Model
                             (t0, amp, r, b)
                             see model_convgamma.c

  ConvDiffGam              : Difference of 2 Gamma Variates
                             (A0, T0, E0, D0, A1, T1, E1, D1)
                             see model_conv_diffgamma.c
                  for help : setenv AFNI_MODEL_HELP_CONVDIFFGAM YES
                             3dNLfim -signal ConvDiffGam

  demri_3                  : Dynamic (contrast) Enhanced MRI
                             (K_trans, Ve, k_ep)
                             see model_demri_3.c
                  for help : setenv AFNI_MODEL_HELP_DEMRI_3 YES
                             3dNLfim -signal demri_3

  ADC                      : Diffusion Signal Model
                             (So, D)
                             see model_diffusion.c

  michaelis_menton         : Michaelis/Menten Concentration Model
                             (v, vmax, k12, k21, mag)
                             see model_michaelis_menton.c

  Expr2                    : generic (3dcalc-like) expression with
                             exactly 2 'free' parameters and using
                             symbol 't' as the time variable;
                             see model_expr2.c for details.

  ConvCosine4              : 4-piece Cosine Convolution Model
                             (A, C1, C2, M1, M2, M3, M4)
                             see model_conv_cosine4.c
                  for help : setenv AFNI_MODEL_HELP_CONV_COSINE4 YES
                             3dNLfim -signal ConvCosine4

  Conv_PRF                 : 4-param Population Receptive Field Model
                             (A, X, Y, sigma)
                             see model_conv_PRF.c
                  for help : setenv AFNI_MODEL_HELP_CONV_PRF YES
                             3dNLfim -signal bunnies

  Conv_PRF_6               : 6-param Population Receptive Field Model
                             (A, X, Y, sigma, sigrat, theta)
                             see model_conv_PRF_6.c
                  for help : setenv AFNI_MODEL_HELP_CONV_PRF_6 YES
                             3dNLfim -signal bunnies

  Conv_PRF_DOG             : 6-param 'Difference of Gaussians' PRF Model
                             (as Conv_PRF, but with second A and sigma)
                             (A, X, Y, sig, A2, sig2)
                             see model_conv_PRF_DOG.c
                  for help : setenv AFNI_MODEL_HELP_CONV_PRF_DOG YES
                             3dNLfim -signal bunnies

----------------------------------------
Noise Models (see the appropriate model_*.c file for exact details) :

  Zero                     : Zero Noise Model
                             (no parameters)
                             see model_zero.c

  Constant                 : Constant Noise Model
                             (constant)
                             see model_constant.c

  Linear                   : Linear Noise Model
                             (constant, linear)
                             see model_linear.c

  Linear+Ort               : Linear+Ort Noise Model
                             (constant, linear, Ort)
                             see model_linplusort.c

  Quadratic                : Quadratic Noise Model
                             (constant, linear, quadratic)
                             see model_quadratic.c

++ Compile date = May  8 2018 {AFNI_18.1.11:macosx_10.7_local}










++ 3dNLfim: AFNI version=AFNI_18.1.11 (May  8 2018) [64-bit]
++ Authored by: B. Douglas Ward
----------------------------------------------------------------------
PRF    - population receptive field (in visual cortex)

   This model is from the paper:

      Population receptive field estimates in human visual cortex
      NeuroImage 39 (2008) 647-660
      Serge O. Dumoulin, Brian A. Wandell

   The model is made from parameters A, x0, y0, sigma, and from stimulus
   time series input (visual field masks over time) by:

      1. compute a Gaussian curve centered at x0, y0 of with spread sigma
             g(x,y) = e^-( [(x-x0)^2+(y-y0)^2] / (2*sigma^2) )
      2. multiply this 2-D image by each 2-D stimulus mask image
      3. convolve the result with an ideal HRF
      4. scale by the amplitude A

   Currently, x0, y0, and sigma are limited to [-1,1], which the stimulus
   images are evaluated on.  This use may be altered in the future.

--------------------------------------------------
To use this model function:

   1. Generate the stimulus time series (currently, images must be square).

      This should be a 2D+time dataset of visual stimuli over time.  They
      are viewed as binary masks by the model function.

    * If results are computed on a restricted grid (which is much faster
      and is the default (see AFNI_MODEL_PRF_ON_GRID)), the resolution of
      those X,Y results will come directly from this stimulus dataset.
      It might be reasonable to have this be 100 or 200 (or 101 or 201)
      voxels on a side.

    * The amount of memory used for the precomputation should be the size
      of this dataset (in float format) times AFNI_MODEL_PRF_SIGMA_NSTEPS.
      It is converted to floats because it is blurred internally.
      The default AFNI_MODEL_PRF_SIGMA_NSTEPS is 100.

   2. Scale and demean the input EPI time series data.

      Scaling is done to put the amplitude values into a reasonable (i.e.
      expected) range, such as by scaling it to a fraction of the mean
      (or maybe twice that).

      Setting the mean to zero is done so that no baseline modeling is
      needed (though it might be good to model drifts in the future).

   3. Generate a convolution reference time series, such as one for GAM.
      This should be on the same TR grid, which is 2 in this example.

      3dDeconvolve -nodata 10 2 -polort -1                \
                   -num_stimts 1 -stim_times 1 '1D:0' GAM \
                   -x1D conv.ref.GAM.1D

   4. Set up environment variables to control execution:

      setenv AFNI_CONVMODEL_REF conv.ref.GAM.1D
      setenv AFNI_MODEL_PRF_STIM_DSET stim.144.bmask.resam+tlrc

   5. And execute:

      3dNLfim -input epi.scale.demean+tlrc \
              -noise Zero                  \
              -signal Conv_PRF             \
              -sconstr 0 -10.0 10.0        \
              -sconstr 1 -1.0 1.0          \
              -sconstr 2 -1.0 1.0          \
              -sconstr 3 0.0 1.0           \
              -BOTH                        \
              -nrand 10000                 \
              -nbest 5                     \
              -bucket 0 buck.PRF           \
              -snfit snfit.PRF

--------------------------------------------------
environment variables:

   -----------------------------------
   required:

      AFNI_CONVMODEL_REF          : specify convolution reference file

         e.g. setenv AFNI_CONVMODEL_REF conv.ref.GAM.1D

         The file this specifies should contain a (short?) impulse
         response function, such as made in step #3, above.

      AFNI_MODEL_PRF_STIM_DSET    : specify visual stimulus dataset

         e.g. setenv AFNI_MODEL_PRF_STIM_DSET stim.144.bmask.resam+tlrc

         This should be a 2D+time dataset of stimulus images over TRs.
         It will be converted to a byte mask over the visual field.

   -----------------------------------
   optional (for use with pre-computed grid):

      AFNI_MODEL_PRF_ON_GRID      : Y/N - use pre-computed solutions

         e.g. setenv AFNI_MODEL_PRF_ON_GRID NO
         e.g. default YES

         Recommended.

         When set, the model function will actually pre-compute all possible
         (unscaled) fit solutions on the first pass.  Since all of these
         parameters have a smooth effect on the result, this method should
         be sufficient.

         Note that the resolution of x0, y0 parameters comes directly from
         the stimulus dataset (AFNI_MODEL_PRF_STIM_DSET), while the sigma
         resolution comes from the maximum (AFNI_MODEL_PRF_SIGMA_MAX) and
         the number of computed values (AFNI_MODEL_PRF_SIGMA_NSTEPS).

         The more voxels to solve for in the input EPI, the more useful this
         is.  For a single voxel, it is slow.  For a large dataset, it can
         speed up the solution by a factor of 1000.

      AFNI_MODEL_PRF_SIGMA_MAX    : specify maximum allowable sigma

         e.g. setenv AFNI_MODEL_PRF_SIGMA_MAX 2.0
         e.g. default 1.0

         Applies directly to AFNI_MODEL_PRF_ON_GRID.

         Use this variable to set the maximum pre-computed sigma.
         This should probably match the sconstr value for sigma.

      AFNI_MODEL_PRF_SIGMA_NSTEPS : specify number of pre-computed sigmas

         e.g. setenv AFNI_MODEL_PRF_SIGMA_NSTEPS 50
         e.g. default 100

         Applies directly to AFNI_MODEL_PRF_ON_GRID.

         Use this variable to set the number of pre-computed sigma values.
         Note that the resolution of pre-computed sigma values will be the
         ratio: AFNI_MODEL_PRF_SIGMA_MAX/AFNI_MODEL_PRF_SIGMA_NSTEPS.

      AFNI_MODEL_PRF_RAM_STATS VAL : request display of RAM usage

         e.g. setenv AFNI_MODEL_PRF_RAM_STATS Y
         e.g. default N

         Use this variable to control display of RAM usage.  By default,
         is it off.  VAL can be one of:

               Y       : yes, show all information
               N       : no [default], show no information
               MALLOC  : show only MALLOC information
               PS      : show only PS information
               ALL     : same as Y
               WAIT    : same as Y, and wait after output

   -----------------------------------
   helpful:

      AFNI_MODEL_HELP_CONV_PRF    : Y/N - output this help

         e.g. setenv AFNI_MODEL_HELP_CONV_PRF YES

         When set, the model initialization function will output this help.

         Consider:

            3dNLfim -signal Conv_PRF

         or more directly (without setenv):

            3dNLfim -DAFNI_MODEL_HELP_CONV_PRF=Y -signal Conv_PRF

      AFNI_MODEL_DEBUG            : specify debug/verbosity level

         e.g. setenv AFNI_MODEL_DEBUG 2

         Be more verbose.  Valid levels are from 0 to 3, currently.

      AFNI_MODEL_DITER            : specify debug iteration

         e.g. setenv AFNI_MODEL_DITER 999

         Get extra debug info at some iteration.

----------------------------------------------------------------------
   Written for E Silson and C Baker.

   R. Reynolds                                        27 June, 2014
----------------------------------------------------------------------
----------------------------------------------------------------------











































PRF_6  - 6 parameter population receptive field (in visual cortex)

      Given stimulus images over time s(x,y,t), find x0, y0, sigma, R and
      theta values that produce a best fit of the model to the data.  Here
      x0, y0 are taken to be the center of the population receptive field,
      sigma is the minor width of it (sigma_x, below), sigrat R is the ratio
      (sigma_y / sigma_x), and theta is the rotation from the y-direction
      major axis (so zero is in the positive y-direction).

      We assume sigma_y >= sigma_x and refer to sigrat >= 1, since that
      sufficiently represents all possibilities.  The reciprocol would
      come from the negative complimentary angle, and would therefore be a
      redundant solution.

      parameter domains:
         x,y        : [-1,1], scaled by the mask, itself
         sigma      : (0,1], where 1 means the mask radius
         R (sigrat) : [1,inf), since sigma defines the smaller size
         theta      : [-PI/2, PI/2), since rotation by PI has no effect

      The model function of x0, y0, sigma, R and theta is constructed as
      follows:

         1. generate a 2-D elliptical Gaussian density function,
            centered at x0, y0, with given sigma, R (=sigma_y/sigma_x),
            and theta (rotation of major direction from positive y):

            -> pRF model g(x,y) = generalized 2-D Gaussian

                e^-(A(x-x0)^2 + B(x-x0)(y-y0) + C(y-y0)^2), where

                     cos^2(theta)     sin^2(theta)
                 A = ------------  +  ------------
                      2sigma_x^2       2sigma_y^2

                       sin(2theta)     sin(2theta)
                 B = - -----------  +  -----------
                       4sigma_x^2      4sigma_y^2

                     sin^2(theta)     cox^2(theta)
                 C = ------------  +  ------------
                      2sigma_x^2       2sigma_y^2

            Substituting sigma_x = sigma, sigma_y = Rsigma_x yields,
                           
                     R^2cos^2(theta) + sin^2(theta)
                 A = ------------------------------
                              2R^2sigma^2

                              sin(2theta)
                 B = -(R^2-1) -----------
                              4R^2sigma^2

                     R^2sin^2(theta) + cos^2(theta)
                 C = ------------------------------
                              2R^2sigma^2

--------------------------------------------------
To use this model function:

   1. Generate the stimulus time series (currently, images must be square).

      This should be a 2D+time dataset of visual stimuli over time.  They
      are viewed as binary masks by the model function.

    * If results are computed on a restricted grid (which is much faster
      and is the default (see AFNI_MODEL_PRF_ON_GRID)), the resolution of
      those X,Y results will come directly from this stimulus dataset.
      It might be reasonable to have this be 100 or 200 (or 101 or 201)
      voxels on a side.

    * The amount of memory used for the precomputation should be the size
      of this dataset (in float format) times AFNI_MODEL_PRF_SIGMA_NSTEPS.
      It is converted to floats because it is blurred internally.
      The default AFNI_MODEL_PRF_SIGMA_NSTEPS is 100.

   2. Scale and demean the input EPI time series data.

      Scaling is done to put the amplitude values into a reasonable (i.e.
      expected) range, such as by scaling it to a fraction of the mean
      (or maybe twice that).

      Setting the mean to zero is done so that no baseline modeling is
      needed (though it might be good to model drifts in the future).

   3. Generate a convolution reference time series, such as one for GAM.
      This should be on the same TR grid, which is 2 in this example.

      3dDeconvolve -nodata 10 2 -polort -1                \
                   -num_stimts 1 -stim_times 1 '1D:0' GAM \
                   -x1D conv.ref.GAM.1D

   4. Set up environment variables to control execution:

      setenv AFNI_CONVMODEL_REF conv.ref.GAM.1D
      setenv AFNI_MODEL_PRF_STIM_DSET stim.144.bmask.resam+tlrc

   5. And execute:

      3dNLfim -input epi.scale.demean+tlrc \
              -noise Zero                  \
              -signal Conv_PRF_6           \
              -sconstr 0 -10.0 10.0        \
              -sconstr 1 -1.0 1.0          \
              -sconstr 2 -1.0 1.0          \
              -sconstr 3 0.0 1.0           \
              -sconstr 4 1.0 4.0           \
              -sconstr 5 -1.571 1.570      \
              -BOTH                        \
              -nrand 10000                 \
              -nbest 5                     \
              -bucket 0 buck.PRF           \
              -snfit snfit.PRF

--------------------------------------------------
environment variables:

   -----------------------------------
   required:

      AFNI_CONVMODEL_REF          : specify convolution reference file

         e.g. setenv AFNI_CONVMODEL_REF conv.ref.GAM.1D

         The file this specifies should contain a (short?) impulse
         response function, such as made in step #3, above.

      AFNI_MODEL_PRF_STIM_DSET    : specify visual stimulus dataset

         e.g. setenv AFNI_MODEL_PRF_STIM_DSETstim.144.bmask.resam+tlrc

         This should be a 2D+time dataset of stimulus images over TRs.
         It will be converted to a byte mask over the visual field.

   -----------------------------------
   optional (for use with pre-computed grid):

      AFNI_MODEL_PRF_ON_GRID      : Y/N - use pre-computed solutions

         e.g. setenv AFNI_MODEL_PRF_ON_GRID NO
         e.g. default YES

         Recommended.

         When set, the model function will actually pre-compute all possible
         (unscaled) fit solutions on the first pass.  Since all of these
         parameters have a smooth effect on the result, this method should
         be sufficient.

         Note that the resolution of x0, y0 parameters comes directly from
         the stimulus dataset (AFNI_MODEL_PRF_STIM_DSET), while the sigma
         resolution comes from the maximum (AFNI_MODEL_PRF_SIGMA_MAX) and
         the number of computed values (AFNI_MODEL_PRF_SIGMA_NSTEPS).

         The more voxels to solve for in the input EPI, the more useful this
         is.  For a single voxel, it is slow.  For a large dataset, it can
         speed up the solution by a factor of 1000.

      AFNI_MODEL_PRF_SIGMA_MAX    : specify maximum allowable sigma

         e.g. setenv AFNI_MODEL_PRF_SIGMA_MAX 2.0
         e.g. default 1.0

         Applies directly to AFNI_MODEL_PRF_ON_GRID.

         Use this variable to set the maximum pre-computed sigma.
         This should probably match the sconstr value for sigma.

      AFNI_MODEL_PRF_SIGMA_NSTEPS : specify number of pre-computed sigmas

         e.g. setenv AFNI_MODEL_PRF_SIGMA_NSTEPS 50
         e.g. default 100

         Applies directly to AFNI_MODEL_PRF_ON_GRID.

         Use this variable to set the number of pre-computed sigma values.
         Note that the resolution of pre-computed sigma values will be the
         ratio: AFNI_MODEL_PRF_SIGMA_MAX/AFNI_MODEL_PRF_SIGMA_NSTEPS.

   -----------------------------------
   helpful:

      AFNI_MODEL_HELP_CONV_PRF_6  : Y/N - output this help

         e.g. setenv AFNI_MODEL_HELP_CONV_PRF_6 YES

         When set, the model initialization function will output this help.

         Consider:

            3dNLfim -signal Conv_PRF_6

         or more directly (without setenv):

            3dNLfim -DAFNI_MODEL_HELP_CONV_PRF_6=Y -signal Conv_PRF_6

      AFNI_MODEL_DEBUG            : specify debug/verbosity level

         e.g. setenv AFNI_MODEL_DEBUG 2

         Be more verbose.  Valid levels are from 0 to 3, currently.

      AFNI_MODEL_DITER            : specify debug iteration

         e.g. setenv AFNI_MODEL_DITER 999

         Get extra debug info at some iteration.

----------------------------------------------------------------------
   Written for E Silson and C Baker.

   R. Reynolds                                        27 June, 2014
----------------------------------------------------------------------


